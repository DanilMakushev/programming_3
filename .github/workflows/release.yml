name: 'C++ CI'

on:
  push:
    branches:
      - main
      - feature/github_actions

jobs:
  build-linux:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install libboost-test-dev -y
      
      - name: Configure CMake
        run: |
          cd lab1_actions
          cmake . -DPATCH_VERSION=${{ github.run_number }}
      
      - name: Build project
        run: |
          cd lab1_actions
          cmake --build .
      
      - name: Run tests
        run: |
          cd lab1_actions
          cmake --build . --target test
      
      - name: Create package
        run: |
          cd lab1_actions
          cmake --build . --target package
      
      - name: Create Release
        id: create_release_linux
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: linux-${{ github.run_number }}
          release_name: Linux Release ${{ github.run_number }}
          draft: false
          prerelease: false
      
      - name: Upload Release Asset
        id: upload-release-asset-linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release_linux.outputs.upload_url }}
          asset_path: ./lab1_actions/helloworld-0.0.${{ github.run_number }}-Linux.deb
          asset_name: helloworld-0.0.${{ github.run_number }}-Linux.deb
          asset_content_type: application/vnd.debian.binary-package

  build-windows:
    runs-on: windows-latest
    permissions: write-all
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Setup MSVC Environment
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install Boost via vcpkg (correct way)
        shell: pwsh
        run: |
          # Клонируем и настраиваем vcpkg
          git clone https://github.com/Microsoft/vcpkg.git
          cd vcpkg
          .\bootstrap-vcpkg.bat
          .\vcpkg integrate install
          .\vcpkg install boost-test:x64-windows
          cd ..
          
          # Устанавливаем переменные окружения для CMake
          $vcpkgDir = "$pwd\vcpkg"
          echo "VCPKG_ROOT=$vcpkgDir" >> $env:GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=$vcpkgDir\installed\x64-windows" >> $env:GITHUB_ENV

      - name: Configure CMake with explicit Boost paths
        shell: pwsh
        run: |
          cd lab1_actions
          
          # Указываем явные пути к Boost
          $boostRoot = "$pwd\..\vcpkg\installed\x64-windows"
          Write-Host "Boost root: $boostRoot"
          
          cmake -B build `
            -DPATCH_VERSION=${{ github.run_number }} `
            -DBOOST_ROOT="$boostRoot" `
            -DBoost_DIR="$boostRoot\lib\cmake\Boost-1.84.0" `
            -DBOOST_INCLUDEDIR="$boostRoot\include" `
            -DBOOST_LIBRARYDIR="$boostRoot\lib" `
            -DCMAKE_PREFIX_PATH="$boostRoot"

      - name: Alternative Configure CMake (if above fails)
        shell: pwsh
        run: |
          cd lab1_actions
          
          # Альтернативный способ - используем toolchain файл правильно
          $vcpkgToolchain = "$pwd\..\vcpkg\scripts\buildsystems\vcpkg.cmake"
          Write-Host "VCPKG toolchain: $vcpkgToolchain"
          
          cmake -B build `
            -DPATCH_VERSION=${{ github.run_number }} `
            -DCMAKE_TOOLCHAIN_FILE="$vcpkgToolchain" `
            -DVCPKG_TARGET_TRIPLET=x64-windows

      - name: Build project
        run: |
          cd lab1_actions
          cmake --build build --config Release

      - name: Copy Boost DLLs for tests
        shell: pwsh
        run: |
          cd lab1_actions/build/Release
          
          # Копируем все необходимые Boost DLL
          $vcpkgBin = "$pwd\..\..\..\vcpkg\installed\x64-windows\bin"
          if (Test-Path $vcpkgBin) {
              Get-ChildItem "$vcpkgBin\boost_unit_test_framework*.dll" | ForEach-Object {
                  Write-Host "Copying $($_.Name)"
                  Copy-Item $_.FullName -Destination "."
              }
          }
          
          # Проверяем, что DLL скопировались
          Get-ChildItem *.dll | ForEach-Object { Write-Host "Available DLL: $($_.Name)" }

      - name: Run tests
        shell: pwsh
        run: |
          cd lab1_actions/build
          
          # Сначала проверяем, что тестовый исполняемый файл существует
          if (Test-Path "Release\test_version.exe") {
              Write-Host "Test executable exists"
              # Проверяем зависимости
              Write-Host "Checking dependencies..."
              & "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\*\bin\Hostx64\x64\dumpbin.exe" /dependents "Release\test_version.exe"
          }
          
          ctest -C Release --output-on-failure -V

      - name: Create package
        run: |
          cd lab1_actions
          cmake --build build --config Release --target package

      - name: Create Release
        id: create_release_windows
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: win-${{ github.run_number }}
          release_name: Windows Release ${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset-windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release_windows.outputs.upload_url }}
          asset_path: ./lab1_actions/build/helloworld-0.0.${{ github.run_number }}-win64.exe
          asset_name: helloworld-0.0.${{ github.run_number }}-win64.exe
          asset_content_type: application/vnd.microsoft.portable-executable