name: 'C++ CI'

on:
  push:
    branches:
      - main
      - feature/github_actions

jobs:
  build-linux:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install libboost-test-dev -y
      
      - name: Configure CMake
        run: |
          cd lab1_actions
          cmake . -DPATCH_VERSION=${{ github.run_number }}
      
      - name: Build project
        run: |
          cd lab1_actions
          cmake --build .
      
      - name: Run tests
        run: |
          cd lab1_actions
          cmake --build . --target test
      
      - name: Create package
        run: |
          cd lab1_actions
          cmake --build . --target package
      
      - name: Create Release
        id: create_release_linux
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: linux-${{ github.run_number }}
          release_name: Linux Release ${{ github.run_number }}
          draft: false
          prerelease: false
      
      - name: Upload Release Asset
        id: upload-release-asset-linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release_linux.outputs.upload_url }}
          asset_path: ./lab1_actions/helloworld-0.0.${{ github.run_number }}-Linux.deb
          asset_name: helloworld-0.0.${{ github.run_number }}-Linux.deb
          asset_content_type: application/vnd.debian.binary-package

  build-windows:
    runs-on: windows-latest
    permissions: write-all
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Install Boost via vcpkg
        shell: pwsh
        run: |
          git clone https://github.com/Microsoft/vcpkg.git
          cd vcpkg
          .\bootstrap-vcpkg.bat
          .\vcpkg install boost-test:x64-windows
          cd ..

      - name: Configure CMake with vcpkg toolchain
        shell: pwsh
        run: |
          cd lab1_actions
          $vcpkgToolchain = "..\vcpkg\scripts\buildsystems\vcpkg.cmake"
          Write-Host "Using vcpkg toolchain: $vcpkgToolchain"
          cmake -B build -DPATCH_VERSION=${{ github.run_number }} -DCMAKE_TOOLCHAIN_FILE="$vcpkgToolchain" -DVCPKG_TARGET_TRIPLET=x64-windows

      - name: Build project
        run: |
          cd lab1_actions
          cmake --build build --config Release

      - name: Copy Boost DLLs for tests
        shell: pwsh
        run: |
          $vcpkgBin = "vcpkg\installed\x64-windows\bin"
          $buildDir = "lab1_actions\build\Release"
          
          if (Test-Path $vcpkgBin) {
              Get-ChildItem "$vcpkgBin\boost_unit_test_framework*.dll" | ForEach-Object {
                  Write-Host "Copying $($_.Name)"
                  Copy-Item $_.FullName -Destination $buildDir
              }
          }

      - name: Run tests
        shell: pwsh
        run: |
          cd lab1_actions/build
          ctest -C Release --output-on-failure

      - name: Create package and find artifacts
        shell: pwsh
        run: |
          cd lab1_actions
          cmake --build build --config Release --target package
          
          # Ищем созданные пакеты
          Write-Host "Searching for package files..."
          Get-ChildItem -Path . -Recurse -Filter "helloworld*.exe" | ForEach-Object {
              Write-Host "Found package: $($_.FullName)"
          }
          Get-ChildItem -Path . -Recurse -Filter "*.exe" | ForEach-Object {
              Write-Host "Found EXE: $($_.FullName)"
          }
          Get-ChildItem -Path build -Recurse -Filter "*" | ForEach-Object {
              Write-Host "Build item: $($_.FullName)"
          }

      - name: List all files to debug
        shell: pwsh
        run: |
          Write-Host "=== Listing all files in workspace ==="
          Get-ChildItem -Path . -Recurse | Where-Object { $_.Name -like "*helloworld*" -or $_.Name -like "*.exe" } | ForEach-Object {
              Write-Host "$($_.FullName) - Size: $($_.Length) bytes"
          }

      - name: Create Release
        id: create_release_windows
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: win-${{ github.run_number }}
          release_name: Windows Release ${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Upload Windows Release Asset
        id: upload-release-asset-windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release_windows.outputs.upload_url }}
          asset_path: ./lab1_actions/build/helloworld-0.0.${{ github.run_number }}-win64.exe
          asset_name: helloworld-0.0.${{ github.run_number }}-win64.exe
          asset_content_type: application/vnd.microsoft.portable-executable

      - name: Upload alternative package locations
        if: failure() && steps.upload-release-asset-windows.outcome == 'failure'
        shell: pwsh
        run: |
          # Пробуем разные возможные пути
          $possiblePaths = @(
              "lab1_actions/build/helloworld-0.0.${{ github.run_number }}-win64.exe",
              "lab1_actions/build/helloworld-*.exe",
              "lab1_actions/helloworld-*.exe", 
              "lab1_actions/build/package/helloworld-*.exe",
              "lab1_actions/build/_CPack_Packages/win64/NSIS/helloworld-*.exe"
          )
          
          foreach ($pathPattern in $possiblePaths) {
              $files = Get-ChildItem -Path $pathPattern -ErrorAction SilentlyContinue
              if ($files) {
                  foreach ($file in $files) {
                      Write-Host "Uploading alternative file: $($file.FullName)"
                      gh release upload win-${{ github.run_number }} $file.FullName --clobber
                  }
                  break
              }
          }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}