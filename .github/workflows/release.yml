name: 'C++ CI'

on:
  push:
    branches: ['lab*']

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      
      - name: Install Windows dependencies
        if: matrix.os == 'windows-latest'

        # Устанавливаем vcpkg и Boost
        #vcpkg не предустановлен на раннерах GitHub Actions, поэтому его нужно скачать
        #Запускается скрипт начальной настройки vcpkg для Windows
        run: |
          
          git clone https://github.com/Microsoft/vcpkg.git 
          .\vcpkg\bootstrap-vcpkg.bat
         
          .\vcpkg\vcpkg install boost-test:x64-windows
          echo "VCPKG_ROOT=$env:GITHUB_WORKSPACE\vcpkg" >> $env:GITHUB_ENV
          choco install gh -y
      
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install libboost-test-dev -y
      
      - run: cmake . -DPATCH_VERSION=${{ github.run_number }} #запускает CMake для подготовки проекта к сборке
      - run: cmake --build . 
      
      - run: ctest --verbose --output-on-failure
      
      - name: Create Release on Windows
        if: matrix.os == 'windows-latest'
        #создания бинарника исполняемого .exe файла
        run: |
          gh release create win-build-${{ github.run_number }} `
            --title "Windows Build ${{ github.run_number }}" `
            ./Debug/helloworld_cli.exe ./Debug/test_version.exe 
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create Release on Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          gh release create linux-build-${{ github.run_number }} \
            --title "Linux Build ${{ github.run_number }}" \
            ./helloworld_cli ./test_version
        env:
          #для создания релиза от имени GitHub Actions и Разрешения на запись в репозиторий
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 