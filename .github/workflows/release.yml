name: 'C++ CI'

on:
  push:
    branches:
      - main
      - feature/github_actions

jobs:
  build-ubuntu:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install libboost-test-dev -y
      
      - name: Configure CMake
        run: |
          cd lab1_actions
          cmake . -DPATCH_VERSION=${{ github.run_number }}
      
      - name: Build project
        run: |
          cd lab1_actions
          cmake --build .
      
      - name: Run tests
        run: |
          cd lab1_actions
          cmake --build . --target test
      
      - name: Create package
        run: |
          cd lab1_actions
          cmake --build . --target package
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false
      
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./lab1_actions/helloworld-0.0.${{ github.run_number }}-Linux.deb
          asset_name: helloworld-0.0.${{ github.run_number }}-Linux.deb
          asset_content_type: application/vnd.debian.binary-package


  build-windows:
    runs-on: windows-latest
    permissions: write-all
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Install Boost via Chocolatey
        run: choco install boost-msvc-14.3 -y

      - name: Add Boost DLLs to PATH
        run: echo "C:\ProgramData\chocolatey\lib\boost-msvc-14.3\tools\boost\stage\lib" >> $env:GITHUB_PATH
      
      - name: Configure CMake
        run: |
          cd lab1_actions
          cmake . -DPATCH_VERSION=${{ github.run_number }}
      
      - name: Build project
        run: |
          cd lab1_actions
          cmake --build . --config Release
      
      - name: Run tests
        run: |
          cd lab1_actions
          ctest -C Release --output-on-failure
      
      - name: Create package
        run: |
          cd lab1_actions
          cmake --build . --config Release --target PACKAGE
      
      - name: Create Windows Release
        id: create-release-windows
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: win-${{ github.run_number }}
          release_name: Windows Release ${{ github.run_number }}
          draft: false
          prerelease: false
      
      - name: Upload Windows Release Asset
        id: upload-windows-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release-windows.outputs.upload_url }}
          asset_path: ./lab1_actions/helloworld-0.0.${{ github.run_number }}-win64.exe
          asset_name: helloworld-0.0.${{ github.run_number }}-win64.exe
          asset_content_type: application/vnd.microsoft.portable-executable